<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Dan Horrigan]]></title>
  <link href="http://blog.dhorrigan.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://blog.dhorrigan.com/"/>
  <updated>2012-12-13T21:04:31-05:00</updated>
  <id>http://blog.dhorrigan.com/</id>
  <author>
    <name><![CDATA[Dan Horrigan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lex 2.2 and a New Home]]></title>
    <link href="http://blog.dhorrigan.com/blog/2012/12/06/lex-2-dot-2-and-a-new-home/"/>
    <updated>2012-12-06T14:21:00-05:00</updated>
    <id>http://blog.dhorrigan.com/blog/2012/12/06/lex-2-dot-2-and-a-new-home</id>
    <content type="html"><![CDATA[<p>Lex 2.2 has just been released.  Not much has changed, but a Minor version bump was required due to a backwards-incompatibility issue.</p>

<h4>Changelog</h4>

<ul>
<li>Fixed a test which was PHP 5.4 only.</li>
<li>Added PHPUnit as a composer dev requirement.</li>
<li>Added a Lex\ParsingException class which is thrown when a parsing exception occurs.</li>
</ul>


<p>The 3rd point is the one that caused the version bump.  Before it would simply dump a message and then <code>exit()</code> (that was stupid).</p>

<h3>New Home</h3>

<p>Lex has been moved from the Fuel GitHub organization to the PyroCMS organization (<a href="">https://github.com/pyrocms/lex</a>).  This was done because it was originally built for PyroCMS and it will be maintained by myself and the Pyro team.</p>

<p>With this change I have also re-named the Composer package to <code>pyrocms/lex</code>, so please update your composer.json files. If you try using the old one, it should tell you that it is replaced by the new one and to update your requirement.</p>

<p>As always if you run into issues go ahead and let me know via the Issue Tracker.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Eval Really Evil? Yes...and No.]]></title>
    <link href="http://blog.dhorrigan.com/blog/2012/08/28/is-eval-really-evil-yes-dot-dot-dot-and-no/"/>
    <updated>2012-08-28T00:00:00-04:00</updated>
    <id>http://blog.dhorrigan.com/blog/2012/08/28/is-eval-really-evil-yes-dot-dot-dot-and-no</id>
    <content type="html"><![CDATA[<p>How many times have you been told "Eval is Evil"?  Probably a lot, and for good reason.  The <code>eval()</code> function in PHP is dangerous in most situations.  Why?  Because executing arbitrary code can lead to very bad things.  Let's look at a real world example that I have seen used in the wild (not going to say which app...for reasons you will see).</p>

<p>The offending code looked something like this (class/variable names have been changed):</p>

<p><code>php
&lt;?php
$method = $_GET['method'];
eval('$return = Foo::'.$method.'();');
?&gt;
</code></p>

<p><em>If you look at that code and say "What is wrong with that?", then you may need to re-evaluate your career path, or read on and learn.</em></p>

<p>The above code was used to be able to call various methods (obviously).  However, this is the worst possibly way to do this.  It is very easy to exploit.  All the user needs to do is find a valid method, then they can execute almost any code they want (let's assume this was in index.php):</p>

<p><code>
index.php?method=bar()%3B%24r%3Dmysql_query(%22select%20*%20from%20users%22)%3Bwhile(%24row%3Dmysql_fetch_assoc(%24r))var_dump(%24row)%3Bdie()%3B%2F%2F
</code></p>

<p>If you decode that you will see that method is set to:</p>

<p><code>
bar();$r=mysql_query("select * from users");while($row=mysql_fetch_assoc($r))var_dump($row);die();//
</code></p>

<p>So when the original code is executed it will run the following:</p>

<p><code>php
&lt;?php
eval('$return = Foo::bar();$r=mysql_query("select * from users");while($row=mysql_fetch_assoc($r))var_dump($row);die();//();');
?&gt;
</code></p>

<p>So, this will (assuming that <code>mysql_connect()</code> has been called and a DB selected) basically dump the entire <code>users</code> table to that user.  I hope you can see why THAT is bad.</p>

<p>This is probably enough to turn you away from using it at all...which isn't a bad thing.  However, this is where I will get hate, there are times where you have no other option to use <code>eval()</code>, or the other options are equally as bad.</p>

<h3>Wait, I can use eval()?</h3>

<p>Well...sometimes, and only if you are very, VERY, careful.  One of the only valid reasons I can think of to use <code>eval()</code> is Integration Tests.</p>

<p>The main reason that it is OK to use it when writing Integration Tests is because you control everything.  You control the code being executed, and the environment in which it is executed.  The tests deal with no end user data, so you don't need to worry (unless you have some evil devs on your team) about arbitrary code execution.</p>

<p>A great example of this use is reading in tests from external files.  These files can contain various data besides the code to execute to run the tests.  So you read in the file, get the code that needs to be run and run it through <code>eval()</code> (you could also write the code out to a temp file, then <code>include</code> it, but it poses the same security risks, and adds unneeded load to the filesystem).</p>

<h3>Ok, so only in tests?</h3>

<p>Knowing when to use <code>eval()</code> is very simple.  Ask yourself "Will this code run in production with user input?" If your answer is yes, then NO, you should not use <code>eval()</code>...ever (unless you REALLY know what you are doing and are REALLY sure the code being executed is safe).</p>

<h3>Catching Syntax Errors in Eval</h3>

<p>Since errors triggered in code ran inside <code>eval()</code> will not be caught by your error handler (set via <code>set_error_handler()</code>), you need to implement some trickery to catch PHP errors.  This can be handy when you are using <code>eval()</code> to execute some test code.</p>

<p>Here is the full code sample for catching the errors:</p>

<p>```php
&lt;?php
// We need to make sure we don't have any previous errors munging our results
@trigger_error('');
eval($code);
$error = error_get_last();</p>

<p>// If the message is empty, then we know it is from our error triggered above
if ($error['message'] !== '') {</p>

<pre><code>// Do whatever you want with the error...here we throw an ErrorException
throw new ErrorException($error['message'], $error['type']);
</code></pre>

<p>}
?>
```</p>

<p>Ok, before you start hating on the code above, it is meant only for use during testing, so using the <code>@</code> operator isn't a big deal (c'mon, we are using <code>eval()</code> anyway).  As you can see, there is not that much to it: Just trigger a blank error, execute the code, check to see if a new error was triggered.</p>

<p>I am using this in some Integration Tests I am writing for Lex for testing templates and such.  I add a little more "magic" to add the correct line number in the test file that the error occured.  This is possible because in the above code <code>$error['line']</code> is equal to the line number of the evaluated code in which the error occured.</p>

<h3>Haters Gonna Hate</h3>

<p>I know I am going to get hate for this article, but that is OK.  Most of you are probably going to hate just because you have heard the "Eval is Evil" line your entire career, so you have been brainwashed into thinking a certain way.  Don't hate on something just because it has a bad rep (<code>goto</code> anyone?).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anonymous Functions vs. Closures]]></title>
    <link href="http://blog.dhorrigan.com/blog/2012/08/11/anonymous-functions-vs-closures/"/>
    <updated>2012-08-11T00:00:00-04:00</updated>
    <id>http://blog.dhorrigan.com/blog/2012/08/11/anonymous-functions-vs-closures</id>
    <content type="html"><![CDATA[<p>Ever wonder what the difference between an Anonymous Function and a Closure is?  What about a Lambda?  How are they implemented in PHP?  There seems to be a lot of confusion in this area, with people interchanging the words, and not really knowing what they mean, so lets dive in and answer these questions.</p>

<p>First things first: A "Lambda" is just another name for an Anonymous Function.  You may have seen it used in some programming language (e.g. Python) and not known what it was...now you do.</p>

<p>Now that the easy stuff is out of the way, lets take a look at what these two things <em>actually are</em>.  If you are confused at first, don't worry, I will hopefully clear it up for you in a bit, these are just brief definitions of the two.</p>

<p><strong>Anonymous Function</strong> - An Anonymous Function is a function that is defined, and occasionally invoked, without being bound to an identifier.  It also has the variable scoping characteristics of a Closure (see below).</p>

<p><strong>Closure</strong> - A Closure is a function that captures the current containing scope, then provides access to that scope when the Closure is invoked.  The Closure binds non-local variable references to the corresponding variables in scope at the time the Closure is created.</p>

<p>From this we can derive: All Anonymous Functions are Closures, but not all Closures are Anonymous Functions.</p>

<h3>Layman's Terms</h3>

<p>An Anonymous Function is a Closure without a name.  A Closure is a function which binds references to non-local variables to local variables inside the function at the time of the Closure definition.</p>

<h3>JavaScript Examples</h3>

<p>Here a few examples written in JavaScript (I used JS here since most people have experience in using is):</p>

<p><strong>Anonymous Function as Callback</strong></p>

<p>``` javascript
function getPosts(callback) {</p>

<pre><code>// Code to fetch posts would go here...
if (response.status == 200) {
    callback(response.body);
}
</code></pre>

<p>}</p>

<p>getPosts(function (posts) {</p>

<pre><code>// Do something with the posts here
</code></pre>

<p>});
```</p>

<p><strong>Closure as Return Value</strong></p>

<p>``` javascript
function getProcessor(driver) {</p>

<pre><code>// Do some magic to load the processing driver here...

// Imagine we set the driver variable to the
// processing driver object here...

return function (data) {
    // Notice we have access to the driver var. from the
    // getProcessor() scope.
    return driver.process(data);
}
</code></pre>

<p>}</p>

<p>var proc = getProcessor('json');</p>

<p>console.log(proc(someJsonDataHere));
```</p>

<h3>How about PHP?</h3>

<p>Here is where things get interesting.  In PHP 5.3, Closures and Anonymous Functions were added to the language.  However, they have their quirks (one of which was fixed in PHP 5.4).</p>

<p>Anonymous Functions are implemented as <code>Closure</code> objects.  PHP takes the idea that "Anonymous Functions are Closures without a name" to heart, because that is EXACTLY what they are.</p>

<p>Here is a simple Anonymous Function being sent to the array_map function to multiply all integers in an array by 2 (useless, I know, but hey, it is just an example):</p>

<p>``` php
&lt;?php
$arr = array_map(function ($val) {</p>

<pre><code>return is_int($val) ? $val * 2 : $val;
</code></pre>

<p>}, $arr);
?>
```</p>

<p>Simple, right?  Now ask yourself this: What if you want to access non-local variables in that function?  After all Anonymous Functions are Closures too.  Well, you can, but there is a catch:  You have to explicitly tell PHP which variables it should use. That is the first of a few quirks, so let us dive into them.</p>

<h4>Quirk #1</h4>

<p>You MUST send the function all of the variables you want bound to the scope of the Closure using the <code>use</code> keyword.  This is different from most other languages, where this is done automatically (like in my JS example above).</p>

<p>``` php
&lt;?php
$foo = 'foo';
$bar = 'bar';</p>

<p>$baz = function () use ($foo, $bar) {</p>

<pre><code>echo $foo, $bar;
</code></pre>

<p>};
?>
```</p>

<h4>Quirk #2</h4>

<p>The bound variables are <strong>copies</strong>, of the variable, not references.  If you want to be able to change the variable inside the Closure, you MUST send it by reference:</p>

<p>``` php
&lt;?php
$foo = 'foo';
$bar = 'bar';</p>

<p>$baz = function () use (&amp;$foo, &amp;$bar) {</p>

<pre><code>$foo = 'Hello ';
$bar = 'World!';
</code></pre>

<p>};
$baz();
echo $foo, $bar; // Outputs "Hello World!";
?>
```</p>

<h4>Quirk #3</h4>

<p>In PHP 5.3 if you are using a Closure inside of a class, the Closure will not have access to <code>$this</code>.  You must send a reference to <code>$this</code>, however, you cannot send <code>$this</code> directly:</p>

<p>``` php
&lt;?php
class Test
{</p>

<pre><code>protected $foo = 'foo';

public function baz() {
    // Get a reference to $this
    $self = &amp;$this;
    $func = function () use ($self) {
        echo $self-&gt;foo;
    }
}
</code></pre>

<p>}
?>
```</p>

<p><em>Note: Because of the way object references are handled in PHP, you do not have to send a reference to <code>$self</code> if you wish to modify it.</em></p>

<h3>PHP 5.4 to the Rescue</h3>

<p>In PHP 5.4, they have added support for the usage of <code>$this</code> in Closures.  They do this by binding the object to the Closure at the time of definition.</p>

<p>You can also change which object your Closure is bound to by using the <code>bind()</code> and <code>bindTo()</code> methods.  You can read more about how to use these methods and exactly what they do in the <a href="http://php.net/manual/en/class.closure.php">PHP documentation</a>.</p>

<h3>So...</h3>

<p>How should you know when to call it a Closure or Anonymous Function?  Simple:  You can always call it a Closure (because all Anonymous Functions are Closures), and if it doesn't have a name, it is Anonymous.  Pretty simple, right?</p>

<p>Hope that helped clear up the confusion.  Feel free to leave questions in the comments, or I am always available on <a href="http://twitter.com/dhorrigan">Twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lex Parser 2.0]]></title>
    <link href="http://blog.dhorrigan.com/blog/2012/08/09/lex-parser-2-dot-0/"/>
    <updated>2012-08-09T00:00:00-04:00</updated>
    <id>http://blog.dhorrigan.com/blog/2012/08/09/lex-parser-2-dot-0</id>
    <content type="html"><![CDATA[<p>After 4 months of no progress or changes to the Lex Parser, I decided it was time for a face lift.  Although there aren’t many new features in 2.0, the things that have changed are big.</p>

<h4>Changelog</h4>

<ul>
<li>PHP version requirement has been upped to 5.3</li>
<li>All code is now PSR-0, 1 and 2 compliant. (See here for more information on the standards.)</li>
<li>Lex is now a Composer Package (under the name fuel/lex).</li>
<li>The Lex GitHub repository has been moved under the fuelphp organization.</li>
<li>New  and  conditional tags have been added.</li>
</ul>


<p>To learn how to install and use Lex using Composer, read the README.</p>

<p>As I stated in the changelog, the repository has been moved under the PyroCMS organization on GitHub.  The URL is <a href="">https://github.com/pyrocms/lex</a>.  This was done to centralize the code, as well as give it a broader audience to help come up with new features and spot bugs faster.</p>
]]></content>
  </entry>
  
</feed>
