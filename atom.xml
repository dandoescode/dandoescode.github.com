<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dan Horrigan]]></title>
  <link href="http://dandoescode.com/atom.xml" rel="self"/>
  <link href="http://dandoescode.com/"/>
  <updated>2012-12-26T17:15:04-05:00</updated>
  <id>http://dandoescode.com/</id>
  <author>
    <name><![CDATA[Dan Horrigan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Workers and Image Processing]]></title>
    <link href="http://dandoescode.com/blog/2012/12/13/workers-and-image-processing/"/>
    <updated>2012-12-13T20:24:00-05:00</updated>
    <id>http://dandoescode.com/blog/2012/12/13/workers-and-image-processing</id>
    <content type="html"><![CDATA[<h2>A Litte Background</h2>

<p>In my second week of working at <a href="http://kaptu.re">Kapture</a>, I was tasked with moving our image processing over to a worker process to help speed up the process.  It wasn&#8217;t THAT slow, but we noticed certain scenarios which caused Kaptures to take longer than they should.  We boiled it down to (mainly) the image processing.</p>

<p>So here is the basic flow of the way Kaptures USED to work so you can understand what is going on:</p>

<ol>
<li>The user takes a photo, enters the info and it starts to upload the photo via an API request, then waits for a response from the server.</li>
<li>The API resizes it to the proper size.</li>
<li>Inserts the photo into the Merchant&#8217;s Polaroid frame.</li>
<li>Makes a thumbnail.</li>
<li>Uploads the resulting image and thumbnail to S3.</li>
<li>Enter the new Kapture info into the database.</li>
<li>Send Response</li>
<li>User continues with Redemption</li>
</ol>


<p>As you can see, there is a lot going on there.  This really isn&#8217;t bad most of the time, but sometimes it can get bogged down with the image resizing (if the server is under load), or S3 can be going a bit slow.</p>

<p>So, what to do?  It is simple, offload it to a background process, right?  Well, yes, that would work, however, that still adds load to the API server and slows down other requests.  Our solution was to offload it to a worker process on a different server.  We already had a workers server, so it was no big deal for us (not going into setting up the Queue and such).</p>

<h2>Which Language?</h2>

<p>We could write the worker in any language we wanted, so which did we choose?  Python.</p>

<p>We did this for two main reasons:</p>

<ul>
<li>Python is better than PHP for long running processes.</li>
<li>Python has the awesome PIL library for image manipulation.</li>
</ul>


<p>Now that we have that sorted, let&#8217;s figure out how we want things to work.</p>

<h2>What Should the End Result Be?</h2>

<p>It is always a good idea to plan things out before you just go Cowboy Coding.  Here is what we came up with:</p>

<ol>
<li>The user takes a photo, enters the info and the app sends the API the photo and other data, and waits for a response.</li>
<li>Enter the new Kapture into the database.</li>
<li>Send the photo (and some metadata) off to the Queue.</li>
<li>Send Response</li>
<li>User continues with Redemption</li>
</ol>


<p>We took 3 huge steps out of the process.  Now it is time to code.</p>

<h2>Making it Work</h2>

<h3>Get it to the Queue</h3>

<p>The first thing to figure out is how to send the user&#8217;s photo over to the worker.  We use RabbitMQ for our Queue server, so we could just send the raw image data in the message we send the Queue.  However, once you start to get into creating clusters of Queue servers, this will cause slow downs, and in some cases will cause some nodes in the cluster to incorrectly be taken out due to heartbeat timeouts (it is an Erlang thing).</p>

<p>We decided to shove the raw image data into our Redis server, then just send the Key along with our other data in the message.  This is done fairly simply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$redis</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Predis\Client</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;host&#39;</span> <span class="o">=&gt;</span> <span class="nx">Config</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;redis.host&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;port&#39;</span> <span class="o">=&gt;</span> <span class="nx">Config</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;redis.port&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;database&#39;</span> <span class="o">=&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;photo:&#39;</span><span class="o">.</span><span class="nv">$image_name</span><span class="p">,</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$image_file</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: <code>$image_name</code> is guaranteed to be unique, so no chance of collisions here.</em></p>

<p>What&#8217;s next?  Yup, we need to send the message to the Queue server so the worker can, well, get to work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">Rabbit</span><span class="o">::</span><span class="na">enque</span><span class="p">(</span><span class="s1">&#39;image_proc&#39;</span><span class="p">,</span> <span class="s1">&#39;polaroid&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="c1">// Some other data you can&#39;t see :P</span>
</span><span class='line'>    <span class="s1">&#39;image_name&#39;</span>    <span class="o">=&gt;</span> <span class="nv">$image_name</span><span class="p">,</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Rabbit::enque</code> is a class and method we have written to make sending stuff to our Queue easy.  There are plenty of tutorials and code around to show you how to do this, so I won&#8217;t bore you with that.  Just know that the first parameter is the Exchange name, and the second is the Queue name.</p>

<h3>The Worker</h3>

<p>For the worker, like I said earlier, we are using Python.  The libraries we are using are as follows:</p>

<ul>
<li>kombu - The AMQP Library</li>
<li>boto - S3 Stuff</li>
<li>PIL - Image Library</li>
<li>redis - Redis Library</li>
<li>requests - To make Requests to the API</li>
</ul>


<p>I am not going to post our exact code (obviously), but here is the basic setup we have to subscribe to the Queue.  This is a little more complicated than it needs to be because we will be adding more workers.</p>

<h4>runner.py</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Connection</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu.utils.debug</span> <span class="kn">import</span> <span class="n">setup_logging</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">workers</span> <span class="kn">import</span> <span class="n">PolaroidWorker</span>
</span><span class='line'>
</span><span class='line'><span class="n">setup_logging</span><span class="p">(</span><span class="n">loglevel</span><span class="o">=</span><span class="s">&#39;INFO&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Here is where we get our configuration and do a few other things</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create the connection to the Queue server.</span>
</span><span class='line'><span class="c"># We use a with statement here so the connection is auto-closed</span>
</span><span class='line'><span class="k">with</span> <span class="n">Connection</span><span class="p">(</span><span class="n">hostname</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;host&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="n">port</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="n">userid</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;user&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="n">password</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;pass&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="n">virtual_host</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;vhost&#39;</span><span class="p">])</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">PolaroidWorker</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Exiting&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have omitted the getting of our config for security purposes, but just know it is a JSON file that we grab and parse.</p>

<p>This file is pretty simple, it just makes a Connection to the Queue server, then creates a new PolaroidWorker (more below), and runs it.</p>

<h4>queues.py</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Exchange</span><span class="p">,</span> <span class="n">Queue</span>
</span><span class='line'>
</span><span class='line'><span class="n">task_exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="s">&#39;image_proc&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;direct&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">queues</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;polaroid&#39;</span><span class="p">:</span> <span class="n">Queue</span><span class="p">(</span><span class="s">&#39;polaroid&#39;</span><span class="p">,</span> <span class="n">task_exchange</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This file defines our Exchange and then a Dictionary of Queues.  These are used later in our Workers.</p>

<h4>workers.py</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">kombu.mixins</span> <span class="kn">import</span> <span class="n">ConsumerMixin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu.log</span> <span class="kn">import</span> <span class="n">get_logger</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">queues</span> <span class="kn">import</span> <span class="n">queues</span>
</span><span class='line'>
</span><span class='line'><span class="c"># S3 Stuff</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">boto.s3.connection</span> <span class="kn">import</span> <span class="n">S3Connection</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">boto.s3.key</span> <span class="kn">import</span> <span class="n">Key</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Everything else we need</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Image</span><span class="o">,</span> <span class="nn">cStringIO</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">redis</span><span class="o">,</span> <span class="nn">urllib</span>
</span><span class='line'>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="n">get_logger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BaseWorker</span><span class="p">(</span><span class="n">ConsumerMixin</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># The name of the queue that this worker consumes (see queues.py)</span>
</span><span class='line'>    <span class="n">worker_queue</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">connection</span><span class="p">,</span> <span class="n">config</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Worker Init&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="n">connection</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="n">config</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_consumers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">Consumer</span><span class="p">,</span> <span class="n">channel</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">Consumer</span><span class="p">(</span><span class="n">queues</span><span class="o">=</span><span class="n">queues</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">worker_queue</span><span class="p">],</span>
</span><span class='line'>                         <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">process</span><span class="p">])]</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PolaroidWorker</span><span class="p">(</span><span class="n">BaseWorker</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">worker_queue</span> <span class="o">=</span> <span class="s">&#39;polaroid&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># This is where you process the message from the Queue</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;[</span><span class="si">%s</span><span class="s">] Processing Raised Exception: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">body</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">],</span> <span class="n">exc</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># Acknowledge the message to the Queue</span>
</span><span class='line'>        <span class="n">message</span><span class="o">.</span><span class="n">ack</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, things get a bit more complicated here.  <code>BaseWorker</code> extends the <code>ConsumerMixin</code> which is provided by kombu to handle all of the &#8220;scaffolding&#8221; type things.  <code>get_consumers</code> is called automatically when the worker starts up (part of the <code>ConsumerMixin</code> class).  It returns an array of Consumers that will handle messages that this workers is supposed to consume.  As you can see we send it the Queue we defined in the <code>queues</code> Dictionary we defined in <code>queues.py</code>, then set the callback to be the <code>process</code> method of the worker class.</p>

<p>Next, we define the worker where we actually get things done.  All it defines is which <code>worker_queue</code> it is responsible for, then defines the <code>process</code> method.  We put all the processing in a try/catch so that we can continue on, and just dump out the exception if there is one.  Finally we acknowledge the message so that we don&#8217;t re-process it.</p>

<h2>The Image Processing</h2>

<p>There is a lot thet goes into this, and I can&#8217;t show you all of the code, but here is a little tid-bit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">orig_tmp_file</span> <span class="o">=</span> <span class="s">&#39;/tmp/orig_&#39;</span> <span class="o">+</span> <span class="n">body</span><span class="p">[</span><span class="s">&#39;image_name&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;.png&#39;</span>
</span><span class='line'><span class="n">tmp_file</span> <span class="o">=</span> <span class="s">&#39;/tmp/&#39;</span> <span class="o">+</span> <span class="n">body</span><span class="p">[</span><span class="s">&#39;image_name&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;.png&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Open the Redis connection</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">redis</span><span class="o">.</span><span class="n">StrictRedis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;redis-host&#39;</span><span class="p">],</span> <span class="n">port</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;redis-port&#39;</span><span class="p">],</span> <span class="n">db</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Gets then Deletes the photo from Redis</span>
</span><span class='line'><span class="n">raw_photo</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;photo:&#39;</span> <span class="o">+</span> <span class="n">body</span><span class="p">[</span><span class="s">&#39;image_name&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s">&#39;photo:&#39;</span> <span class="o">+</span> <span class="n">body</span><span class="p">[</span><span class="s">&#39;image_name&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create a string buffer then open it as an image</span>
</span><span class='line'><span class="c"># Note: cStringIO is much faster than StringIO, hence the usage</span>
</span><span class='line'><span class="n">photo</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">cStringIO</span><span class="o">.</span><span class="n">StringIO</span><span class="p">(</span><span class="n">raw_photo</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Save the original so we can upload it later</span>
</span><span class='line'><span class="n">photo</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">orig_tmp_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Open the Polaroid Frame image, load it into PIL then close it.</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">polaroid_url</span><span class="p">)</span>
</span><span class='line'><span class="n">frame</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">cStringIO</span><span class="o">.</span><span class="n">StringIO</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()))</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Resize the image, and add the User Photo to the frame</span>
</span><span class='line'><span class="c"># all in one go, then save it to the temp file</span>
</span><span class='line'><span class="n">frame</span><span class="o">.</span><span class="n">paste</span><span class="p">(</span><span class="n">photo</span><span class="o">.</span><span class="n">resize</span><span class="p">((</span><span class="mi">586</span><span class="p">,</span> <span class="mi">497</span><span class="p">)),</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">))</span>
</span><span class='line'><span class="n">frame</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">tmp_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get the images up to S3</span>
</span><span class='line'><span class="n">framed_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">upload_image</span><span class="p">(</span><span class="n">s3_path_would_go_here</span><span class="p">,</span> <span class="n">tmp_file</span><span class="p">)</span>
</span><span class='line'><span class="n">image_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">upload_image</span><span class="p">(</span><span class="n">other_s3_path_would_go_here</span><span class="p">,</span> <span class="n">orig_tmp_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This is where we would send an API Request with all the info it needs to </span>
</span><span class='line'><span class="c"># update the records and such.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Close the Redis connection, we don&#39;t want to leave open connections</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">connection_pool</span><span class="o">.</span><span class="n">disconnect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Delete the temp files</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">unlink</span><span class="p">(</span><span class="n">tmp_file</span><span class="p">)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">unlink</span><span class="p">(</span><span class="n">orig_tmp_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Some other stuff to free up memory and such that I won&#39;t bore you with</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note: Some of the variable names and other stuff has been changed.</strong></p>

<p>It looks like a lot of code, but if you take out the comments, it isn&#8217;t bad.</p>

<h2>Uploading to S3</h2>

<p>In the above code we call <code>self.upload_image</code>, so here it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">upload_image</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key_path</span><span class="p">,</span> <span class="n">file_path</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Uploads the given image to S3 at the given key Path.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Connect to S3 if we haven&#39;t already</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">s3</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">s3</span> <span class="o">=</span> <span class="n">S3Connection</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;aws&#39;</span><span class="p">][</span><span class="s">&#39;key&#39;</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;aws&#39;</span><span class="p">][</span><span class="s">&#39;secret&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Get the S3 bucket</span>
</span><span class='line'>    <span class="n">bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">s3</span><span class="o">.</span><span class="n">get_bucket</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">&#39;aws&#39;</span><span class="p">][</span><span class="s">&#39;s3_bucket&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Determine the Key (object) Path and create it</span>
</span><span class='line'>    <span class="n">k</span> <span class="o">=</span> <span class="n">Key</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">key_path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Get a file pointer to the temp file then send it to S3</span>
</span><span class='line'>    <span class="n">image</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">k</span><span class="o">.</span><span class="n">set_contents_from_file</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span><span class='line'>    <span class="n">image</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Make the image public</span>
</span><span class='line'>    <span class="n">k</span><span class="o">.</span><span class="n">make_public</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">url</span> <span class="c">#We build the URL here, but I can&#39;t show you that.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple right?</p>

<h2>Did it Work?</h2>

<p>Yes! Very well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lex 2.2 and a New Home]]></title>
    <link href="http://dandoescode.com/blog/2012/12/06/lex-2-dot-2-and-a-new-home/"/>
    <updated>2012-12-06T14:21:00-05:00</updated>
    <id>http://dandoescode.com/blog/2012/12/06/lex-2-dot-2-and-a-new-home</id>
    <content type="html"><![CDATA[<p>Lex 2.2 has just been released.  Not much has changed, but a Minor version bump was required due to a backwards-incompatibility issue.</p>

<h4>Changelog</h4>

<ul>
<li>Fixed a test which was PHP 5.4 only.</li>
<li>Added PHPUnit as a composer dev requirement.</li>
<li>Added a Lex\ParsingException class which is thrown when a parsing exception occurs.</li>
</ul>


<p>The 3rd point is the one that caused the version bump.  Before it would simply dump a message and then <code>exit()</code> (that was stupid).</p>

<h3>New Home</h3>

<p>Lex has been moved from the Fuel GitHub organization to the PyroCMS organization (<a href="">https://github.com/pyrocms/lex</a>).  This was done because it was originally built for PyroCMS and it will be maintained by myself and the Pyro team.</p>

<p>With this change I have also re-named the Composer package to <code>pyrocms/lex</code>, so please update your composer.json files. If you try using the old one, it should tell you that it is replaced by the new one and to update your requirement.</p>

<p>As always if you run into issues go ahead and let me know via the Issue Tracker.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It was fun.]]></title>
    <link href="http://dandoescode.com/blog/2012/10/25/it-was-fun/"/>
    <updated>2012-10-25T00:00:00-04:00</updated>
    <id>http://dandoescode.com/blog/2012/10/25/it-was-fun</id>
    <content type="html"><![CDATA[<p>Many of you will have already known this was coming eventually.  For the past 8 months or so I have been contributing to FuelPHP less and less (in-fact nothing anytime recently).  Today, I am officially stepping away from the project.</p>

<p>Harro (<a href="http://twitter.com/WanWizard">@WanWizard</a>) is, and has been, the project lead. I have full confidence in his abilities to take the project further than I ever could.  I will be transfering everything (domain name, DNS, hosting accounts, etc) over to him over the next few days, so no worries about any of that.</p>

<p>This decision has nothing to do with the framework itself. I still believe it is, and will be, a great solution for a lot of people.</p>

<p>It was fun while it lasted, I just have to move on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Eval Really Evil? Yes...and No.]]></title>
    <link href="http://dandoescode.com/blog/2012/08/28/is-eval-really-evil-yes-dot-dot-dot-and-no/"/>
    <updated>2012-08-28T00:00:00-04:00</updated>
    <id>http://dandoescode.com/blog/2012/08/28/is-eval-really-evil-yes-dot-dot-dot-and-no</id>
    <content type="html"><![CDATA[<p>How many times have you been told &#8220;Eval is Evil&#8221;?  Probably a lot, and for good reason.  The <code>eval()</code> function in PHP is dangerous in most situations.  Why?  Because executing arbitrary code can lead to very bad things.  Let&#8217;s look at a real world example that I have seen used in the wild (not going to say which app&#8230;for reasons you will see).</p>

<p>The offending code looked something like this (class/variable names have been changed):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$method</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;method&#39;</span><span class="p">];</span>
</span><span class='line'><span class="k">eval</span><span class="p">(</span><span class="s1">&#39;$return = Foo::&#39;</span><span class="o">.</span><span class="nv">$method</span><span class="o">.</span><span class="s1">&#39;();&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><em>If you look at that code and say &#8220;What is wrong with that?&#8221;, then you may need to re-evaluate your career path, or read on and learn.</em></p>

<p>The above code was used to be able to call various methods (obviously).  However, this is the worst possibly way to do this.  It is very easy to exploit.  All the user needs to do is find a valid method, then they can execute almost any code they want (let&#8217;s assume this was in index.php):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">index.php?method=bar()%3B%24r%3Dmysql_query(%22select%20*%20from%20users%22)%3Bwhile(%24row%3Dmysql_fetch_assoc(%24r))var_dump(%24row)%3Bdie()%3B%2F%2F</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you decode that you will see that method is set to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">bar();$r=mysql_query(&quot;select * from users&quot;);while($row=mysql_fetch_assoc($r))var_dump($row);die();//</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when the original code is executed it will run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">eval</span><span class="p">(</span><span class="s1">&#39;$return = Foo::bar();$r=mysql_query(&quot;select * from users&quot;);while($row=mysql_fetch_assoc($r))var_dump($row);die();//();&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>So, this will (assuming that <code>mysql_connect()</code> has been called and a DB selected) basically dump the entire <code>users</code> table to that user.  I hope you can see why THAT is bad.</p>

<p>This is probably enough to turn you away from using it at all&#8230;which isn&#8217;t a bad thing.  However, this is where I will get hate, there are times where you have no other option to use <code>eval()</code>, or the other options are equally as bad.</p>

<h3>Wait, I can use eval()?</h3>

<p>Well&#8230;sometimes, and only if you are very, VERY, careful.  One of the only valid reasons I can think of to use <code>eval()</code> is Integration Tests.</p>

<p>The main reason that it is OK to use it when writing Integration Tests is because you control everything.  You control the code being executed, and the environment in which it is executed.  The tests deal with no end user data, so you don&#8217;t need to worry (unless you have some evil devs on your team) about arbitrary code execution.</p>

<p>A great example of this use is reading in tests from external files.  These files can contain various data besides the code to execute to run the tests.  So you read in the file, get the code that needs to be run and run it through <code>eval()</code> (you could also write the code out to a temp file, then <code>include</code> it, but it poses the same security risks, and adds unneeded load to the filesystem).</p>

<h3>Ok, so only in tests?</h3>

<p>Knowing when to use <code>eval()</code> is very simple.  Ask yourself &#8220;Will this code run in production with user input?&#8221; If your answer is yes, then NO, you should not use <code>eval()</code>&#8230;ever (unless you REALLY know what you are doing and are REALLY sure the code being executed is safe).</p>

<h3>Catching Syntax Errors in Eval</h3>

<p>Since errors triggered in code ran inside <code>eval()</code> will not be caught by your error handler (set via <code>set_error_handler()</code>), you need to implement some trickery to catch PHP errors.  This can be handy when you are using <code>eval()</code> to execute some test code.</p>

<p>Here is the full code sample for catching the errors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">// We need to make sure we don&#39;t have any previous errors munging our results</span>
</span><span class='line'><span class="o">@</span><span class="nb">trigger_error</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">eval</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span>
</span><span class='line'><span class="nv">$error</span> <span class="o">=</span> <span class="nb">error_get_last</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If the message is empty, then we know it is from our error triggered above</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$error</span><span class="p">[</span><span class="s1">&#39;message&#39;</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do whatever you want with the error...here we throw an ErrorException</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">ErrorException</span><span class="p">(</span><span class="nv">$error</span><span class="p">[</span><span class="s1">&#39;message&#39;</span><span class="p">],</span> <span class="nv">$error</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, before you start hating on the code above, it is meant only for use during testing, so using the <code>@</code> operator isn&#8217;t a big deal (c&#8217;mon, we are using <code>eval()</code> anyway).  As you can see, there is not that much to it: Just trigger a blank error, execute the code, check to see if a new error was triggered.</p>

<p>I am using this in some Integration Tests I am writing for Lex for testing templates and such.  I add a little more &#8220;magic&#8221; to add the correct line number in the test file that the error occured.  This is possible because in the above code <code>$error['line']</code> is equal to the line number of the evaluated code in which the error occured.</p>

<h3>Haters Gonna Hate</h3>

<p>I know I am going to get hate for this article, but that is OK.  Most of you are probably going to hate just because you have heard the &#8220;Eval is Evil&#8221; line your entire career, so you have been brainwashed into thinking a certain way.  Don&#8217;t hate on something just because it has a bad rep (<code>goto</code> anyone?).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Syntax Highlighting for Tumblr]]></title>
    <link href="http://dandoescode.com/blog/2012/08/17/simple-syntax-highlighting-for-tumblr/"/>
    <updated>2012-08-17T00:00:00-04:00</updated>
    <id>http://dandoescode.com/blog/2012/08/17/simple-syntax-highlighting-for-tumblr</id>
    <content type="html"><![CDATA[<p>I was looking to add syntax highlighting to my blog here, and figured I would use the ever-handy (and simple) <a href="http://code.google.com/p/google-code-prettify/">Google Code Prettifier</a>,</p>

<p>It ended up being really simple, and I added a bit of JavaScript so I don&#8217;t have to manually write the <code>&lt;pre&gt;</code> tags and add the <code>prettyprint</code> class to code blocks.  This is helpful when you are writing your posts in Markdown.</p>

<p>Two simple steps:</p>

<ol>
<li>Either upload the <code>prettify.css</code> and the <code>prettify.js</code> files to Tumblr and link to them, or you can link to them directly in their repository:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;http://google-code-prettify.googlecode.com/svn/trunk/src/prettify.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://google-code-prettify.googlecode.com/svn/trunk/src/prettify.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Insert the following code somewhere in your theme:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">run</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;pre code&quot;</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">run</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;prettyprint&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">run</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">prettyPrint</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: Make sure you put the stylesheet link above your Theme&#8217;s CSS.</em></p>

<p><em>Note 2: This assumes you have jQuery already loaded.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anonymous Functions vs. Closures]]></title>
    <link href="http://dandoescode.com/blog/2012/08/11/anonymous-functions-vs-closures/"/>
    <updated>2012-08-11T00:00:00-04:00</updated>
    <id>http://dandoescode.com/blog/2012/08/11/anonymous-functions-vs-closures</id>
    <content type="html"><![CDATA[<p>Ever wonder what the difference between an Anonymous Function and a Closure is?  What about a Lambda?  How are they implemented in PHP?  There seems to be a lot of confusion in this area, with people interchanging the words, and not really knowing what they mean, so lets dive in and answer these questions.</p>

<p>First things first: A &#8220;Lambda&#8221; is just another name for an Anonymous Function.  You may have seen it used in some programming language (e.g. Python) and not known what it was&#8230;now you do.</p>

<p>Now that the easy stuff is out of the way, lets take a look at what these two things <em>actually are</em>.  If you are confused at first, don&#8217;t worry, I will hopefully clear it up for you in a bit, these are just brief definitions of the two.</p>

<p><strong>Anonymous Function</strong> - An Anonymous Function is a function that is defined, and occasionally invoked, without being bound to an identifier.  It also has the variable scoping characteristics of a Closure (see below).</p>

<p><strong>Closure</strong> - A Closure is a function that captures the current containing scope, then provides access to that scope when the Closure is invoked.  The Closure binds non-local variable references to the corresponding variables in scope at the time the Closure is created.</p>

<p>From this we can derive: All Anonymous Functions are Closures, but not all Closures are Anonymous Functions.</p>

<h3>Layman&#8217;s Terms</h3>

<p>An Anonymous Function is a Closure without a name.  A Closure is a function which binds references to non-local variables to local variables inside the function at the time of the Closure definition.</p>

<h3>JavaScript Examples</h3>

<p>Here a few examples written in JavaScript (I used JS here since most people have experience in using is):</p>

<p><strong>Anonymous Function as Callback</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getPosts</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Code to fetch posts would go here...</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">getPosts</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">posts</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do something with the posts here</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Closure as Return Value</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getProcessor</span><span class="p">(</span><span class="nx">driver</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do some magic to load the processing driver here...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Imagine we set the driver variable to the</span>
</span><span class='line'>    <span class="c1">// processing driver object here...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Notice we have access to the driver var. from the</span>
</span><span class='line'>        <span class="c1">// getProcessor() scope.</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">process</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">proc</span> <span class="o">=</span> <span class="nx">getProcessor</span><span class="p">(</span><span class="s1">&#39;json&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">proc</span><span class="p">(</span><span class="nx">someJsonDataHere</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How about PHP?</h3>

<p>Here is where things get interesting.  In PHP 5.3, Closures and Anonymous Functions were added to the language.  However, they have their quirks (one of which was fixed in PHP 5.4).</p>

<p>Anonymous Functions are implemented as <code>Closure</code> objects.  PHP takes the idea that &#8220;Anonymous Functions are Closures without a name&#8221; to heart, because that is EXACTLY what they are.</p>

<p>Here is a simple Anonymous Function being sent to the array_map function to multiply all integers in an array by 2 (useless, I know, but hey, it is just an example):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$arr</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">is_int</span><span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$val</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">:</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="nv">$arr</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple, right?  Now ask yourself this: What if you want to access non-local variables in that function?  After all Anonymous Functions are Closures too.  Well, you can, but there is a catch:  You have to explicitly tell PHP which variables it should use. That is the first of a few quirks, so let us dive into them.</p>

<h4>Quirk #1</h4>

<p>You MUST send the function all of the variables you want bound to the scope of the Closure using the <code>use</code> keyword.  This is different from most other languages, where this is done automatically (like in my JS example above).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$foo</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$bar</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$baz</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$foo</span><span class="p">,</span> <span class="nv">$bar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$foo</span><span class="p">,</span> <span class="nv">$bar</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Quirk #2</h4>

<p>The bound variables are <strong>copies</strong>, of the variable, not references.  If you want to be able to change the variable inside the Closure, you MUST send it by reference:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$foo</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$bar</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$baz</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$foo</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$bar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$foo</span> <span class="o">=</span> <span class="s1">&#39;Hello &#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$bar</span> <span class="o">=</span> <span class="s1">&#39;World!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$baz</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$foo</span><span class="p">,</span> <span class="nv">$bar</span><span class="p">;</span> <span class="c1">// Outputs &quot;Hello World!&quot;;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Quirk #3</h4>

<p>In PHP 5.3 if you are using a Closure inside of a class, the Closure will not have access to <code>$this</code>.  You must send a reference to <code>$this</code>, however, you cannot send <code>$this</code> directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$foo</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">baz</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Get a reference to $this</span>
</span><span class='line'>        <span class="nv">$self</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$func</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="na">foo</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: Because of the way object references are handled in PHP, you do not have to send a reference to <code>$self</code> if you wish to modify it.</em></p>

<h3>PHP 5.4 to the Rescue</h3>

<p>In PHP 5.4, they have added support for the usage of <code>$this</code> in Closures.  They do this by binding the object to the Closure at the time of definition.</p>

<p>You can also change which object your Closure is bound to by using the <code>bind()</code> and <code>bindTo()</code> methods.  You can read more about how to use these methods and exactly what they do in the <a href="http://php.net/manual/en/class.closure.php">PHP documentation</a>.</p>

<h3>So&#8230;</h3>

<p>How should you know when to call it a Closure or Anonymous Function?  Simple:  You can always call it a Closure (because all Anonymous Functions are Closures), and if it doesn&#8217;t have a name, it is Anonymous.  Pretty simple, right?</p>

<p>Hope that helped clear up the confusion.  Feel free to leave questions in the comments, or I am always available on <a href="http://twitter.com/dhorrigan">Twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lex Parser 2.0]]></title>
    <link href="http://dandoescode.com/blog/2012/08/09/lex-parser-2-dot-0/"/>
    <updated>2012-08-09T00:00:00-04:00</updated>
    <id>http://dandoescode.com/blog/2012/08/09/lex-parser-2-dot-0</id>
    <content type="html"><![CDATA[<p>After 4 months of no progress or changes to the Lex Parser, I decided it was time for a face lift.  Although there aren’t many new features in 2.0, the things that have changed are big.</p>

<h4>Changelog</h4>

<ul>
<li>PHP version requirement has been upped to 5.3</li>
<li>All code is now PSR-0, 1 and 2 compliant. (See here for more information on the standards.)</li>
<li>Lex is now a Composer Package (under the name fuel/lex).</li>
<li>The Lex GitHub repository has been moved under the fuelphp organization.</li>
<li>New  and  conditional tags have been added.</li>
</ul>


<p>To learn how to install and use Lex using Composer, read the README.</p>

<p>As I stated in the changelog, the repository has been moved under the PyroCMS organization on GitHub.  The URL is <a href="">https://github.com/pyrocms/lex</a>.  This was done to centralize the code, as well as give it a broader audience to help come up with new features and spot bugs faster.</p>
]]></content>
  </entry>
  
</feed>
